import{_ as i,c as a,o as n,ae as l}from"./chunks/framework.DwtXxGKd.js";const E=JSON.parse('{"title":"位运算符原理详解","description":"","frontmatter":{},"headers":[],"relativePath":"docs/backend/java/3-位运算符.md","filePath":"docs/backend/java/3-位运算符.md","lastUpdated":1754570464000}'),p={name:"docs/backend/java/3-位运算符.md"};function t(h,s,k,e,r,d){return n(),a("div",null,s[0]||(s[0]=[l(`<h1 id="位运算符原理详解" tabindex="-1">位运算符原理详解 <a class="header-anchor" href="#位运算符原理详解" aria-label="Permalink to &quot;位运算符原理详解&quot;">​</a></h1><h2 id="一、数字在计算机中的表示方法" tabindex="-1">一、数字在计算机中的表示方法 <a class="header-anchor" href="#一、数字在计算机中的表示方法" aria-label="Permalink to &quot;一、数字在计算机中的表示方法&quot;">​</a></h2><h3 id="_1-1-原码-sign-magnitude" tabindex="-1">1.1 原码（Sign-Magnitude） <a class="header-anchor" href="#_1-1-原码-sign-magnitude" aria-label="Permalink to &quot;1.1 原码（Sign-Magnitude）&quot;">​</a></h3><p><strong>定义</strong>：最高位表示符号位（0为正，1为负），其余位表示数值的绝对值</p><p><strong>示例</strong>（以8位为例）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+5 的原码：0000 0101</span></span>
<span class="line"><span>-5 的原码：1000 0101</span></span>
<span class="line"><span>+0 的原码：0000 0000</span></span>
<span class="line"><span>-0 的原码：1000 0000  ← 存在+0和-0两种表示</span></span></code></pre></div><p><strong>问题</strong>：</p><ul><li>存在+0和-0两种表示，浪费存储空间</li><li>加法运算复杂，需要判断符号</li></ul><h3 id="_1-2-反码-one-s-complement" tabindex="-1">1.2 反码（One&#39;s Complement） <a class="header-anchor" href="#_1-2-反码-one-s-complement" aria-label="Permalink to &quot;1.2 反码（One&#39;s Complement）&quot;">​</a></h3><p><strong>定义</strong>：</p><ul><li>正数的反码与原码相同</li><li>负数的反码是对原码除符号位外的所有位取反</li></ul><p><strong>示例</strong>（以8位为例）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+5 的反码：0000 0101  （与原码相同）</span></span>
<span class="line"><span>-5 的反码：1111 1010  （对原码1000 0101除符号位外取反）</span></span>
<span class="line"><span>+0 的反码：0000 0000</span></span>
<span class="line"><span>-0 的反码：1111 1111  ← 仍然存在+0和-0</span></span></code></pre></div><p><strong>问题</strong>：</p><ul><li>仍然存在+0和-0的问题</li><li>运算时需要处理进位</li></ul><h3 id="_1-3-补码-two-s-complement" tabindex="-1">1.3 补码（Two&#39;s Complement） <a class="header-anchor" href="#_1-3-补码-two-s-complement" aria-label="Permalink to &quot;1.3 补码（Two&#39;s Complement）&quot;">​</a></h3><p><strong>定义</strong>：</p><ul><li>正数的补码与原码相同</li><li>负数的补码是对反码+1，或者对原码除符号位外所有位取反再+1</li></ul><p><strong>示例</strong>（以8位为例）：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>+5 的补码：0000 0101  （与原码相同）</span></span>
<span class="line"><span>-5 的补码：1111 1011  （反码1111 1010 + 1）</span></span>
<span class="line"><span>+0 的补码：0000 0000</span></span>
<span class="line"><span>-0 的补码：0000 0000  ← 只有一种0的表示</span></span></code></pre></div><p><strong>优势</strong>：</p><ul><li>统一了0的表示</li><li>简化了加减法运算</li><li>现代计算机普遍采用补码表示</li></ul><h3 id="_1-4-补码的快速计算方法" tabindex="-1">1.4 补码的快速计算方法 <a class="header-anchor" href="#_1-4-补码的快速计算方法" aria-label="Permalink to &quot;1.4 补码的快速计算方法&quot;">​</a></h3><p><strong>方法一</strong>：反码+1</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-5: 原码 1000 0101 → 反码 1111 1010 → 补码 1111 1011</span></span></code></pre></div><p><strong>方法二</strong>：从右往左找到第一个1，该位及右边保持不变，左边全部取反</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>原码：1000 0101</span></span>
<span class="line"><span>      ↑   ↑ 第一个1</span></span>
<span class="line"><span>补码：1111 1011</span></span></code></pre></div><h2 id="二、位运算符详解" tabindex="-1">二、位运算符详解 <a class="header-anchor" href="#二、位运算符详解" aria-label="Permalink to &quot;二、位运算符详解&quot;">​</a></h2><h3 id="_2-1-按位与" tabindex="-1">2.1 按位与（&amp;） <a class="header-anchor" href="#_2-1-按位与" aria-label="Permalink to &quot;2.1 按位与（&amp;）&quot;">​</a></h3><p><strong>原理</strong>：两个位都为1时结果为1，否则为0</p><p><strong>真值表</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A | B | A&amp;B</span></span>
<span class="line"><span>--|---|----</span></span>
<span class="line"><span>0 | 0 |  0</span></span>
<span class="line"><span>0 | 1 |  0</span></span>
<span class="line"><span>1 | 0 |  0</span></span>
<span class="line"><span>1 | 1 |  1</span></span></code></pre></div><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0011</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0001 = 1</span></span></code></pre></div><p><strong>应用场景</strong>：</p><ul><li><strong>获取特定位</strong>：<code>value &amp; (1 &lt;&lt; n)</code> 获取第n位</li><li><strong>清零特定位</strong>：<code>value &amp; ~(1 &lt;&lt; n)</code> 将第n位清零</li><li><strong>判断奇偶</strong>：<code>n &amp; 1</code> 为1则奇数，为0则偶数</li></ul><h3 id="_2-2-按位或" tabindex="-1">2.2 按位或（|） <a class="header-anchor" href="#_2-2-按位或" aria-label="Permalink to &quot;2.2 按位或（|）&quot;">​</a></h3><p><strong>原理</strong>：两个位有一个为1时结果为1，都为0时为0</p><p><strong>真值表</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A | B | A|B</span></span>
<span class="line"><span>--|---|----</span></span>
<span class="line"><span>0 | 0 |  0</span></span>
<span class="line"><span>0 | 1 |  1</span></span>
<span class="line"><span>1 | 0 |  1</span></span>
<span class="line"><span>1 | 1 |  1</span></span></code></pre></div><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0011</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0111 = 7</span></span></code></pre></div><p><strong>应用场景</strong>：</p><ul><li><strong>设置特定位</strong>：<code>value | (1 &lt;&lt; n)</code> 将第n位设为1</li><li><strong>合并标志位</strong>：权限控制、状态标记</li></ul><h3 id="_2-3-按位异或" tabindex="-1">2.3 按位异或（^） <a class="header-anchor" href="#_2-3-按位异或" aria-label="Permalink to &quot;2.3 按位异或（^）&quot;">​</a></h3><p><strong>原理</strong>：两个位相同为0，不同为1</p><p><strong>真值表</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>A | B | A^B</span></span>
<span class="line"><span>--|---|----</span></span>
<span class="line"><span>0 | 0 |  0</span></span>
<span class="line"><span>0 | 1 |  1</span></span>
<span class="line"><span>1 | 0 |  1</span></span>
<span class="line"><span>1 | 1 |  0</span></span></code></pre></div><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0011</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0110 = 6</span></span></code></pre></div><p><strong>重要性质</strong>：</p><ul><li><strong>交换律</strong>：a ^ b = b ^ a</li><li><strong>结合律</strong>：(a ^ b) ^ c = a ^ (b ^ c)</li><li><strong>自反性</strong>：a ^ a = 0</li><li><strong>恒等性</strong>：a ^ 0 = a</li></ul><p><strong>应用场景</strong>：</p><ul><li><strong>无临时变量交换</strong>：</li></ul><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// b = (a^b)^b = a^(b^b) = a^0 = a</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a = (a^b)^a = (a^a)^b = 0^b = b</span></span></code></pre></div><ul><li><strong>翻转特定位</strong>：<code>value ^ (1 &lt;&lt; n)</code> 翻转第n位</li><li><strong>加密解密</strong>：相同密钥异或两次回到原值</li></ul><h3 id="_2-4-按位取反" tabindex="-1">2.4 按位取反（~） <a class="header-anchor" href="#_2-4-按位取反" aria-label="Permalink to &quot;2.4 按位取反（~）&quot;">​</a></h3><p><strong>原理</strong>：每一位都取反，0变1，1变0</p><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1010 = -6（补码表示）</span></span></code></pre></div><p><strong>补码计算过程</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>原数：  5 = 0000 0101</span></span>
<span class="line"><span>取反：     1111 1010  ← 这是-6的补码</span></span>
<span class="line"><span>验证-6的补码：</span></span>
<span class="line"><span>-6原码：1000 0110</span></span>
<span class="line"><span>-6反码：1111 1001</span></span>
<span class="line"><span>-6补码：1111 1010  ✓</span></span></code></pre></div><p><strong>重要公式</strong>：<code>~n = -(n+1)</code></p><h3 id="_2-5-左移运算符" tabindex="-1">2.5 左移运算符（&lt;&lt;） <a class="header-anchor" href="#_2-5-左移运算符" aria-label="Permalink to &quot;2.5 左移运算符（&lt;&lt;）&quot;">​</a></h3><p><strong>原理</strong>：将二进制位向左移动，右边补0</p><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0001 0100 = 20</span></span></code></pre></div><p><strong>数学意义</strong>：左移n位相当于乘以2^n</p><p><strong>注意事项</strong>：</p><ul><li>可能发生溢出</li><li>符号位也会参与移位</li></ul><h3 id="_2-6-右移运算符" tabindex="-1">2.6 右移运算符（&gt;&gt;） <a class="header-anchor" href="#_2-6-右移运算符" aria-label="Permalink to &quot;2.6 右移运算符（&gt;&gt;）&quot;">​</a></h3><p><strong>原理</strong>：将二进制位向右移动</p><p><strong>算术右移（&gt;&gt;）</strong>：</p><ul><li>正数：左边补0</li><li>负数：左边补1（保持符号）</li></ul><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 20</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0001 0100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0101 = 5</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1000（-8的补码）</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1110 = -2（补1保持负号）</span></span></code></pre></div><h3 id="_2-7-无符号右移" tabindex="-1">2.7 无符号右移（&gt;&gt;&gt;） <a class="header-anchor" href="#_2-7-无符号右移" aria-label="Permalink to &quot;2.7 无符号右移（&gt;&gt;&gt;）&quot;">​</a></h3><p><strong>原理</strong>：无论正负数，左边都补0</p><p><strong>示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1111 1111 1111 1111 1111 1111 1000</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0011 1111 1111 1111 1111 1111 1111 1110</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果是一个很大的正数：1073741822</span></span></code></pre></div><h2 id="三、位运算在不同进制中的应用" tabindex="-1">三、位运算在不同进制中的应用 <a class="header-anchor" href="#三、位运算在不同进制中的应用" aria-label="Permalink to &quot;三、位运算在不同进制中的应用&quot;">​</a></h2><h3 id="_3-1-补码的位运算示例" tabindex="-1">3.1 补码的位运算示例 <a class="header-anchor" href="#_3-1-补码的位运算示例" aria-label="Permalink to &quot;3.1 补码的位运算示例&quot;">​</a></h3><p><strong>8位补码加法</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  5 + (-3) = 2</span></span>
<span class="line"><span>  0000 0101  (+5的补码)</span></span>
<span class="line"><span>+ 1111 1101  (-3的补码：原码1000 0011→反码1111 1100→补码1111 1101)</span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span>  0000 0010  (结果为+2，进位舍弃)</span></span></code></pre></div><p><strong>验证-3的补码</strong>：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-3原码：1000 0011</span></span>
<span class="line"><span>-3反码：1111 1100（符号位不变，其他位取反）</span></span>
<span class="line"><span>-3补码：1111 1101（反码+1）</span></span></code></pre></div><h3 id="_3-2-溢出处理" tabindex="-1">3.2 溢出处理 <a class="header-anchor" href="#_3-2-溢出处理" aria-label="Permalink to &quot;3.2 溢出处理&quot;">​</a></h3><p><strong>8位有符号数范围</strong>：-128 ~ +127</p><p><strong>溢出示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 127</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0111 1111</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0001</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a + b = 128，但8位有符号数无法表示128</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果：1000 0000 = -128（发生溢出）</span></span></code></pre></div><h2 id="四、位运算的高级应用" tabindex="-1">四、位运算的高级应用 <a class="header-anchor" href="#四、位运算的高级应用" aria-label="Permalink to &quot;四、位运算的高级应用&quot;">​</a></h2><h3 id="_4-1-位掩码-bit-mask" tabindex="-1">4.1 位掩码（Bit Mask） <a class="header-anchor" href="#_4-1-位掩码-bit-mask" aria-label="Permalink to &quot;4.1 位掩码（Bit Mask）&quot;">​</a></h3><p><strong>权限系统示例</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 定义权限常量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> READ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0001</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WRITE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0010</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXECUTE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0100</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">final</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DELETE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 设置权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> READ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WRITE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> EXECUTE; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0111 = 7</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查权限</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canRead </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> READ) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> canDelete </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DELETE) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// false</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 添加权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DELETE; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 = 15</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 移除权限</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">permission </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WRITE; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1101 = 13</span></span></code></pre></div><h3 id="_4-2-位运算优化技巧" tabindex="-1">4.2 位运算优化技巧 <a class="header-anchor" href="#_4-2-位运算优化技巧" aria-label="Permalink to &quot;4.2 位运算优化技巧&quot;">​</a></h3><p><strong>1. 快速乘除2的幂次</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 乘法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// n * 8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 除法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// n / 4（正数）</span></span></code></pre></div><p><strong>2. 判断2的幂次</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isPowerOfTwo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原理：2的幂次只有一个1位，n-1会使该位及右边全部翻转</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 例：8(1000) &amp; 7(0111) = 0</span></span></code></pre></div><p><strong>3. 统计1的个数</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> countOnes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 清除最右边的1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><strong>4. 获取最右边的1</strong>：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rightmostOne</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> n </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">n);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 原理：-n是n的补码，n &amp; (-n)只保留最右边的1</span></span></code></pre></div><h3 id="_4-3-位运算与性能" tabindex="-1">4.3 位运算与性能 <a class="header-anchor" href="#_4-3-位运算与性能" aria-label="Permalink to &quot;4.3 位运算与性能&quot;">​</a></h3><p><strong>优势</strong>：</p><ul><li>直接操作二进制位，速度快</li><li>占用内存少</li><li>某些算法用位运算更简洁</li></ul><p><strong>注意事项</strong>：</p><ul><li>可读性较差，需要注释</li><li>容易出错，需要仔细测试</li><li>过度优化可能影响代码维护</li></ul><h2 id="五、常见错误与注意事项" tabindex="-1">五、常见错误与注意事项 <a class="header-anchor" href="#五、常见错误与注意事项" aria-label="Permalink to &quot;五、常见错误与注意事项&quot;">​</a></h2><h3 id="_5-1-符号扩展问题" tabindex="-1">5.1 符号扩展问题 <a class="header-anchor" href="#_5-1-符号扩展问题" aria-label="Permalink to &quot;5.1 符号扩展问题&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">byte</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;              </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1111</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b;                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1111 1111 1111 1111 1111 1111 1111 1111</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unsigned </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0xFF</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 0000 0000 0000 0000 0000 0000 1111 1111 = 255</span></span></code></pre></div><h3 id="_5-2-移位运算的边界" tabindex="-1">5.2 移位运算的边界 <a class="header-anchor" href="#_5-2-移位运算的边界" aria-label="Permalink to &quot;5.2 移位运算的边界&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 32</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果可能不是预期的，因为只取低5位</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 实际相当于 a &lt;&lt; 0 = 1</span></span></code></pre></div><h3 id="_5-3-优先级问题" tabindex="-1">5.3 优先级问题 <a class="header-anchor" href="#_5-3-优先级问题" aria-label="Permalink to &quot;5.3 优先级问题&quot;">​</a></h3><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误：位运算优先级低于比较运算符</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASK </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASK) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 相当于 flags &amp; (MASK == MASK)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 正确：加括号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((flags </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASK) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> MASK)</span></span></code></pre></div><h2 id="六、实际应用场景总结" tabindex="-1">六、实际应用场景总结 <a class="header-anchor" href="#六、实际应用场景总结" aria-label="Permalink to &quot;六、实际应用场景总结&quot;">​</a></h2><ol><li><strong>状态管理</strong>：使用位标志表示多种状态</li><li><strong>权限控制</strong>：每一位表示一种权限</li><li><strong>数据压缩</strong>：在有限空间内存储更多信息</li><li><strong>算法优化</strong>：某些算法用位运算性能更好</li><li><strong>加密解密</strong>：XOR运算在简单加密中的应用</li><li><strong>图形处理</strong>：颜色值、像素操作</li><li><strong>网络编程</strong>：IP地址处理、协议解析</li></ol><p>位运算虽然看起来复杂，但掌握了原码、反码、补码的概念后，理解起来就会容易很多。在实际编程中，合理使用位运算可以让代码更高效、更简洁。</p>`,118)]))}const o=i(p,[["render",t]]);export{E as __pageData,o as default};
